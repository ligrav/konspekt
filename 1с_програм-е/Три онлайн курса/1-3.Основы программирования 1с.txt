
22 урок
Продолжаем предыдущую задачу
Общие модули
Вынесем каждый алгоритм в отдельную область
Вынесем алгоритм выбора каталога в общий модуль 
Создаем общий модуль 
	Общий модуль - добавить - _РаботаСФайлами	 
	галочка на клиенте, на сервере убираем  

К 13 минуте мы загрузили наш код в функцию _РаботаСФайлами, которая является клиентом

Функция ПолучитьИмяКаталога()   Экспорт

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	//  Надо реагировать на то что выберет пользователь Выбрать или Отмена
	ИмяКаталога = ""; // ЭТО НУЖНО ДЛЯ ТОГО ЧТО БЫ ПРИ НАЖАТИЕ ОТМЕНТЫ НЕ БЫЛО ОШИБКИ
	Если Диалог.Выбрать() Тогда
		ИмяКаталога = Диалог.Каталог;
	КонецЕсли;
	
	Возврат ИмяКаталога;
	
КонецФункции // ПолучитьИмяКаталога()

Функция ЗагрузитьДанныеИзФайлов(ИмяКаталога)  Экспорт

	Текст = Новый ТекстовыйДокумент;

	СтрокаВнешнихДанных = "";
	// НайтиФайлы - функция которая возвращает массив
	МассивФайлов = НайтиФайлы(ИмяКаталога, "*.txt",Ложь); // Искать в подкаталогах - Ложь
	Для каждого Файл из МассивФайлов Цикл // в цикле мы должны прочитать наш файл
		Текст.Прочитать(Файл.ПолноеИмя); // ПолноеИмя это свойство файлов
		СтрокаВнешнихДанных = СтрокаВнешнихДанных + Текст.ПолучитьТекст();
	КонецЦикла; 
	
	Возврат СтрокаВнешнихДанных;

КонецФункции // ЗагрузитьДанныеИзФайлов()


########## Как код изменился в Самом Модуле  ##########


&НаКлиенте
Процедура ИмяКаталогаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь; // что бы при выборе папки он не писал ничего лишнего
    ИмяКаталога = _РаботаСФайлами.ПолучитьИмяКаталога();  
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзФайлов(Команда)
	ЭтотОбъект.СтрокаВнешнихДанных = _РаботаСФайлами.ЗагрузитьДанныеИзФайлов(ЭтотОбъект.ИмяКаталога);
КонецПроцедуры


########## Создаем новую Функцию _РаботаСТаблицей на сервере  ##########
// Вырезаем код из модуля

	// Структуру колонок отправляем как параметры, потому что нам нужен универсальный алгортитм
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаДанных.Колонки; // что бы добавить в таблицу значения колонки использцем цикл
	Для каждого ОписаниеКолонки из СтруктураКолонок Цикл
		Если ТипЗнч(ОписаниеКолонки.Значение) = Тип("ОписаниеТипов") Тогда        // Он не обьясняет что за описание типов
			Колонки.Добавить(ОписаниеКолонки.Ключ, ОписаниеКолонки.Значение);
		Иначе
			Колонки.Добавить(ОписаниеКолонки.Ключ); // Создаем колонку без описания типизации
		КонецЕсли;                                                                     
	КонецЦикла;
	// Мы заполнили колонки таблица, теперь заполняем саму таблицу
	МассивСтрок = СтрРазделить( СтрокаВнешнихДанных, Символы.ПС); // Делим текст по строкам
	Для каждого СтрокаДанных Из МассивСтрок Цикл  
		// Сообщить(СтрокаДанных); если написать только эту команду в цикле, то он выведет строки нашего текста 
		МассивДанных = СтрРазделить (СтрокаДанных, ", ", Ложь); // Делим нашу строчку еще на один массив
		СтрокаТаблицы = ТаблицаДанных.Добавить();
		Для Индекс = 0 По МассивДанных.Количество()-1 Цикл // Тоже самое что и ВГраница, ее можно было тоже указать
			Попытка
				СтрокаТаблицы[Индекс] = МассивДанных[Индекс];   
			Исключение
				СтрокаОшибки = СтрШаблон( "При загрузки строки(%1) произошла ошибка: %2",
				СтрокаДанных, ОписаниеОшибки());
				Сообщить(СтрокаОшибки);
			КонецПопытки
		КонецЦикла 
	КонецЦикла;   
	
	Возврат ТаблицаДанных;

КонецФункции // ЗагрузитьДанныеВТаблицу()

########################## Рефакторинг - инструмент для того что бы создать описание функции
Правой кнопкой мыши нажимаем на рефакторинг и он даст описание функции

Код, который стал в Модуле
&НаСервере
Процедура ЗагрузитьДанныеВТаблицуНаСервере()
	СтруктураКолонок = Новый Структура("Фамилия, Задача, Ставка, ЧислоЧасов"); // Названия колонок
	СтруктураКолонок.Ставка = Новый ОписаниеТипов("Число"); // строку переводим в число
	СтруктураКолонок.ЧислоЧасов = Новый ОписаниеТипов("Число");
	
	ТаблицаДанных = _РаботаСТаблицей.ЗагрузитьДанныеВТаблицу( СтруктураКолонок, СтрокаВнешнихДанных);

	Сообщить(ТаблицаДанных.Итог("Ставка"));
КонецПроцедуры

######################  Сохраняем данные реквизитов

Форма - - Использование - АвтоматическоеСохранение - Использовать 
Ставим галочки сохранение у ИмяКаталога и СтрокаВнешнихДанных
Теперь если закроем Форму загрузки данных данные не стираются

################# Работаем с табличным документом 
Файл - Новый - табличный документ 

Пишет код, который загружает данные в таблицу, но я не могу конспектировать, так как не очень все запомнил

23 Урок Объектная модель работы с данными

Создаем Справочники - Товары
7 50 
Создаем общие команды - добавить товар, группа - важное 
То как мы добавляли товар в справочнике, теперь делаем это командой
Код команыды


&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды) 
	
	СоздатьТовар();  // создать товар можно только на сервере

КонецПроцедуры

&НаСервере
Процедура СоздатьТовар()

	НовыйТовар = Справочники.Товары.СоздатьЭлемент();
	НовыйТовар.Наименование = "Програмный товар";
	НовыйТовар.Записать();   // эти три строчки аналог тому, как мы создаем товар в справоячнике

КонецПроцедуры


#################
Добавляем справочники Товары реквизиты 
Производитель - строка - длина 30 
Цена - число 

Изучаем Модуль менеджера 
В модуле менеджера пишем код 
Процедура СоздатьТовар(Название, Производитель, Цена)   Экспорт
	
	НовыйТовар = СоздатьЭлемент();    
	НовыйТовар.Наименование = Название;
	НовыйТовар.Производитель = Производитель;
	НовыйТовар.Цена = Цена;
	НовыйТовар.Записать();
	
КонецПроцедуры

Возвращаемся в общие команды и нашей команде переделываем код

Процедура СоздатьТовар()
	// Создаем товар, в скобках реквизиты из модуля менеджера
	Справочники.Товары.СоздатьТовар("Програмный товар", "Програмный производитель", 100);
КонецПроцедуры

Теперь производим поиск по нашему справочнику
для этого нам нужна новая форма
 
реквизиты
НазваниеТовара
Команды
НайтиТовар	
Действие на клиенте и на сервере 

&НаСервере
Процедура НайтиТоварНаСервере()
	ЭлементПоиска = Справочники.Товары.НайтиПоНаименованию( НазваниеТовара );
	// Возвращается значение булево, найден товар, да или нет
	// Сообщить( "Товар найден = " + (НЕ ЭлементПоиска.Пустая()) ); 
	ОбъектПоиска = ЭлементПоиска.ПолучитьОбъект();   
	// При поиске товара цена увеличивается на единицу
	ОбъектПоиска.Цена = ЭлементПоиска.Цена + 1;
	// ЭлементПоиска.Записать();      ссылку менять и записывать мы не можем  
	ОбъектПоиска.Записать();
КонецПроцедуры

&НаКлиенте
Процедура НайтиТовар(Команда)
	НайтиТоварНаСервере();
КонецПроцедуры


######## 24 урок
Требуется
	Создать интерфейс для пользователь. В котором он может ввести наименование товара (тип строка),
	цену,производителя(три поля)
	
	Создать две кнопки: "Завести номенклатуру", "Найти номенклатуру"

	При нажатии на кнопку 
	"Завести номенклатуру" должен создаваться новый элемент справочника со всеми указанными данными

	При нажатии на кнопку "Найти номенклатуру" в поля формы должны автоматически заполнятся данными
	найденной номенклатуры. Если номенклатура не найдена, вывести соответствующее сообщение.

	
	Я создал формы и две команды и вот код 

	&НаСервере
Процедура ЗавестиНоменклатуруНаСервере()
	Справочники.Товары.СоздатьТовар(НазваниеТовара,ПроизводительТовара,ЦенаТовара);
КонецПроцедуры

&НаКлиенте
Процедура ЗавестиНоменклатуру(Команда)
	ЗавестиНоменклатуруНаСервере();
КонецПроцедуры

&НаСервере
Процедура НайтиНоменклатуруНаСервере()     
	ЦенаТовара = "";
	ПроизводительТовара = "";
	ЭлементПоиска = Справочники.Товары.НайтиПоНаименованию( НазваниеТовара );
	Если ЭлементПоиска.Пустая() Тогда
		Сообщить("Товар не найден");   
		Возврат;
	КонецЕсли;
	
	НазваниеТовара = ЭлементПоиска.Наименование;
	ЦенаТовара = ЭлементПоиска.Цена;
	ПроизводительТовара = ЭлементПоиска.Производитель;
		
КонецПроцедуры

&НаКлиенте
Процедура НайтиНоменклатуру(Команда)
	НайтиНоменклатуруНаСервере();   
	
	
КонецПроцедуры

25 Урок

Основная задача 
Требуется сохранить данные таблицы значений в базе данных, используя механизмы "Спаравочник" и "Документ"

Нам понадобится два справочника "сотрудник" "Задача" и
Документ "СводнаяВедомость" - Табличная часть  с колонками "Сотрудник, Задача, Ставка, ЧислоЧасов, Сумма"

Решение 

Создаем Справочник "Сотрудник" длина наименования 150 
добавляем реквизит "Дата рождения" - тип дата
Создаем Справочник - "Задача" длина тоже 150

Создаем документ "СводнаяВедомость", Реквизит "ИмяКаталога" Неограниченная длина, добавляем табличную часть 
"СписокСотрудников" и в него заводим 5 реквизитов 
"Сотрудник" - справочник ссылка Сотрудник
"Задача" - Справочник ссылка Задача
"Ставка" - тип чисор Длинна 12 Точность 2 
"ЧислоЧасов" - Число 
"Сумма" - Число длинна 12, Точность 2

Запускаем пользоватский режим 
СводнаяВедомость - новый документ, заводим сотрудников 

Заполнили Фамилию и дату рождения сотрудника и теперь хотим что бы с фамилией рядом указывался возраст сотрудника

Изменяем стандартное представление справояники Сиотрудник 
Справочние Сотрудник  - Модуль менеджера 


Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 
	// раз мы отключили стандартную обработку, то теперь там пусто и нам надо отобразить с нуля новые реквизиты
	Поля.Добавить("Наименование");     
	Поля.Добавить("ДатаРождения");
	
КонецПроцедуры

// этот обработчик будет показывать как будет выглядить наша строка
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВозрастВСекундах = ТекущаяДата() - Данные.ДатаРождения;
	
	ВозрастДатой = '0001-01-01' + ВозрастВСекундах;
	
	Представление = СтрШаблон( "%1 (%2)", Данные.Наименование, "" +Год(ВозрастДатой) + " лет" );
	
	
КонецПроцедуры


Разработать теперь надо документ, где пользователь может выбрать карталог ....

СводнаяВедомость - Формы - "ФормаДокумента" - ИмяКаталога - Свойства - Открытие - да, Создать на клиенте(Открытие)

&НаКлиенте
Процедура ИмяКаталогаОткрытие(Элемент, СтандартнаяОбработка)
	Объект.ИмяКаталога = _РаботаСФайлами.ПолучитьИмяКаталога(); 
	СтандартнаяОбработка = Ложь
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеВТаблицуНаСервере(СтрокаДанных)

	ОписаниеКолонок = Новый Структура("Фамилия, Задача, Ставка, ЧислоЧасов");
	ОписаниеКолонок.Ставка = Новый ОписаниеТипов("Число");
	ОписаниеКолонок.ЧислоЧасов = Новый ОписаниеТипов("Число"); 
	
	ТаблицаЗагрузки = _РаботаСТаблицей.ЗагрузитьДанныеВТаблицу(ОписаниеКолонок, СтрокаДанных);
	
	НашОбъект = РеквизитФормыВЗначение("Объект");
	НашОбъект.ЗаполнитьСписокСотрудников(ТаблицаЗагрузки);
	ЗначениеВРеквизитФормы(НашОбъект, "Объект");
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеВТаблицу(Команда) 
	СтрокаДанных = _РаботаСФайлами.ЗагрузитьДанныеИзФайлов( Объект.ИмяКаталога);
	ЗагрузитьДанныеВТаблицуНаСервере(СтрокаДанных);      
	
КонецПроцедуры


Код в модуле Объекта сводной ведомости 


Процедура ЗаполнитьСписокСотрудников( ТаблицаДанных )	Экспорт 
	
	СписокСотрудников.Очистить();
	
	//Если в докуменде два иванова, но нам надо из сложить как и их часы работы
	// это делается с помощью команды Свернуть
	ТаблицаДанных.Свернуть("Фамилия, Задача", "ЧислоЧасов, Ставка");
	
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
	
		СтрокаСотрудника = СписокСотрудников.Добавить();
		СтрокаСотрудника.ЧислоЧасов = СтрокаТЗ.ЧислоЧасов;
		СтрокаСотрудника.Ставка = СтрокаТЗ.Ставка;
		СтрокаСотрудника.Сумма = СтрокаСотрудника.ЧислоЧасов * СтрокаСотрудника.Ставка;
	    СтрокаСотрудника.Сотрудник = Справочники.Сотрудник.НайтиПоНаименованию(СтрокаТЗ.Фамилия);
		СтрокаСотрудника.Задача = Справочники.Задача.НайтиПоНаименованию(СтрокаТЗ.Задача);
	КонецЦикла;

КонецПроцедуры


Осталась лишь одна проблема, если в документе есть фамилия, а у нас в 1с ее нет, 
то она добавляется как пустая строка
в следующем уроке это будем исправлять

26 урок

В модуле менеджера пишем Сотрудников

Функция НайтиИлиСоздатьПоНаименованию( СтрокаПоиска )  Экспорт 

	Результат = НайтиПоНаименованию( СтрокаПоиска );
	
	Если результат.Пустая() Тогда
		
		НовыйЭлемент = СоздатьЭлемент();
		НовыйЭлемент.Наименование = СтрокаПоиска;
		
		ГСЧ = Новый ГенераторСлучайныхЧисел;
		
		ДатаРожденияСотрудника = '1960-01-01'+ ГСЧ.СлучайноеЧисло(0, 1000000000);
		
		НовыйЭлемент.ДатаРождения = ДатаРожденияСотрудника;
		НовыйЭлемент.Записать();
		Результат = НовыйЭлемент.Ссылка;
		
	КонецЕсли;   
	
	Возврат Результат

КонецФункции // НайтиИлиСоздатьПоНаименованию()

В модуле менеджера Задач копируем верхний модуль убирая дату рождения 

Функция НайтиИлиСоздатьПоНаименованию( СтрокаПоиска )  Экспорт 

	Результат = НайтиПоНаименованию( СтрокаПоиска );
	
	Если результат.Пустая() Тогда
		
		НовыйЭлемент = СоздатьЭлемент();
		НовыйЭлемент.Наименование = СтрокаПоиска;
		НовыйЭлемент.Записать();
		Результат = НовыйЭлемент.Ссылка;
		
	КонецЕсли;   
	
	Возврат Результат

КонецФункции // НайтиИлиСоздатьПоНаименованию()


Исправляем процедуру 

Процедура ЗаполнитьСписокСотрудников( ТаблицаДанных )	Экспорт 
	
	СписокСотрудников.Очистить();
	
	//Если в докуменде два иванова, но нам надо из сложить как и их часы работы
	// это делается с помощью команды Свернуть
	ТаблицаДанных.Свернуть("Фамилия, Задача", "ЧислоЧасов, Ставка");
	
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
	
		СтрокаСотрудника = СписокСотрудников.Добавить();
		СтрокаСотрудника.ЧислоЧасов = СтрокаТЗ.ЧислоЧасов;
		СтрокаСотрудника.Ставка = СтрокаТЗ.Ставка;
		СтрокаСотрудника.Сумма = СтрокаСотрудника.ЧислоЧасов * СтрокаСотрудника.Ставка;
		// Место которые мы исправляем
	    СтрокаСотрудника.Сотрудник = Справочники.Сотрудник.НайтиИлиСоздатьПоНаименованию(СтрокаТЗ.Фамилия);
		СтрокаСотрудника.Задача = Справочники.Задача.НайтиИлиСоздатьПоНаименованию(СтрокаТЗ.Задача);
		// вот и все 
	КонецЦикла;

КонецПроцедуры

Теперь если в документе если задачи или фамилииЮ которые у нас нет в справочнике, тперь они будут
автоматически добавлятся


Следующая задачка

Создать документ "ВедомостьПоЗадаче"
В шапке документа будут указываться задача
В таблице будет список сотрудников, которые занимались этой задачей 

Добавим новый документ "ВедомостьПоЗадаче"
в нем реквизит "Задача" - справочникссылка Задача
Добавим табличную часть "СписокСотрудников", берем ее из СводнойВедомости
убираем реквизит Задача

Делаем новую обработку СформироватьДокументы
// Загрузка информации из текстовых документов в документ ведомости по задачи 
Добавляем реквизит Имякаталога - строка - неограниченной длины
// с обработкой можно взаимодействовать програмно - без интерфейса
// мы создали обработку и она нигде не отобразилась
Формы - Добавить - далее - галочка ИмяКаталога - готово
ИмяКаталога Открытие - да, Открытие - Создать на клиенте


&НаКлиенте
Процедура ИмяКаталогаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.ИмяКаталога = _РаботаСФайлами.ПолучитьИмяКаталога();
	
КонецПроцедуры

Добавляем команду 	СформироватьДокументы - перетаскиваем на Форму
Действие - Создать на клиенте и на сервере 

15 минута - я перестал что либо понимать что и откуда он берет и какая функция за что отвечает
похоже мне лучше заново все пересмотреть