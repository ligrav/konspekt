11.1 bool 
12.1 Конвертация типов
		моменты, когда питон преобразует сам ЭТО МАГИЧЕСКИЕ МЕТОДЫ	
		
		int_num = 5
		float_num = 4.5

		print(int_num + float_num)  # 9.5

		bool_val = True
		int_val = 7

		print(bool_val + int_val)  # 8 питон переконвертировал булиевый тип в 1
		еще пример
		print(int_num.__add__(float_num))  # NotImplemented
		print(int_num.__radd__(float_num))  # NotImplemented
		print(float_num.__radd__(int_num))  # 9.5
		
		######################################################################
		
		int_num = 50
		float_num = 7.5
		str_val = 'abc'
		print(int_num * str_val) # 50 * abc abcabcabcabcabcabcab...
		print(int_num.__mul__(float_num)) # NotImplemented
		print(float_num.__rmul__(int_num)) #  375.0
		
12.3 	Показывает как показывать все магические методы 
		показывает как работает help 
		print(help(list))
		print(help(listю__eq__))
		print(help(bool))
		Показывает документацию на обьект

13.1	Списки
		user_input = [True, 'hi', '11', 10.5] # в списках может быть что угодно
		print(len(user_input)) # 4 это его длина
		print(user_input[2]) # 11
		user_input[2] = 333
		print(user_input[2]) # 333 меняем элемент в списке
		del user_input[1] # убираем второй элемент в списке
		
		Список, который содержит в себе словарь
		
		users = [
    {
        'user_id': 134,
        'user_name': 'Alice'
    },
    {
        'user_id': 831,
        'user_name': 'Bob'
    }
				]
		print(len(users))  # 2
		print(users[1]['user_id'])  # 831
		
		Переменые, которым присвоены значения, можно вставить в список

13.2	Методы списков
		Добавление элементов в список
		
		numbers = []

		numbers.append(1)
		numbers.append(5)
		numbers.append(3)
		numbers.append(4)

		print(numbers)  # [1, 5, 3, 4]
		
		numbers.sort() # 1,3,4,5
		numbers.sort(reverse=True) # 5,4,3,1
		numbers.pop() # удален 4
		numbers.pop(2) # удаллен 3
		print(numbers) # 5,4
		remove_element = numbers.pop() сохранит 3, который был только что удален 
		
		Конвертация в список
		
		greeting = "Hello from Python"
		greeting_letters = list(greeting)

		print(greeting_letters)
		# ['H', 'e', 'l', 'l', 'o', ' ', 'f', 'r', 'o', 'm', ' ', 'P', 'y', 't', 'h', 'o', 'n']
		
		my_dict = {'a': 10, 'b': True}
		my_dict_keys = list(my_dict)

		print(my_dict_keys)
		# ['a', 'b'] перевел в список с потерей данных, не предствляю, где это нужно
		
		Арифметика в списках
		
		ratings = [2.5, 5.0, 4.3, 3.7]

		print(min(ratings))  # 2.5
		print(max(ratings))  # 5.0
		print(sum(ratings))  # 15.5
		print(sum(ratings)/len(ratings)) # 3.875
		
		Объединение списков
		my_ratings = [2.5, 5.0]
		other_ratings = [3.7, 4.5, 4.9]
		all_ratings = my_ratings + other_ratings
		print(all_ratings)
		# [2.5, 5.0, 3.7, 4.5, 4.9]
		
		# Нарезка списка
		
		my_ratings = [2.5, 5.0]
		other_ratings = [3.7, 4.5, 4.9]
		all_ratings = my_ratings + other_ratings
		print(all_ratings)
		# [2.5, 5.0, 3.7, 4.5, 4.9]
		two_ratings = all_ratings[:2]
		print(two_ratings)  # [2.5, 5.0]
		middle_ratings = all_ratings[1:-1]
		print(middle_ratings)
		
		Копирование списка
		Сначала он обсьяняет, что нельзя приравнять переменные, так как они ссылаются на один объект
		я не буду копировать его пример, так как лень, надеюсь, читая этот текст, я вспомню о чем я
		
		а теперь как правильно
		
		my_cars = ['BMW', 'Mercedes']
		copied_cars = my_cars[:] # мы копирумем список, а не ссылаемся напеременную и ниже проверяем это
			# copied_cars = my_cars.copy # а это второй вариант
			# copied_cars = list(my_cars) # а это тертий вариант
		copied_cars.append('Audi')
		print(copied_cars)
		print(my_cars)
		
		Практика
		Вставить элемент перед определенным индексом
		my_nums = [10, 50, 0, 5, 5, 100]

		my_nums.insert(2, -5)

		print(my_nums) # [10, 50, -5, 0, 5, 5, 100]
			# my_nums.clear()  #очистить список
		
		my_nums.extend('abc') # добавляет элемент
		print(my_nums)
		# [10, 50, 0, 5, 5, 100, 'a', 'b', 'c']
		
		Завтра сделаю задачу
		Задача 1 
		создать список из 6 элементов разны, удалить третий элемент, поменять список местами, создать второй список и сложить их
		list_one = [1, 'abc', 3.5, 4, 'zif']
		list_one.pop(2)
		print(len(list_one))
		list_one[0] = 'abc'
		list_one[1] = '3.5'
		list_one[2] = '1'
		print(list_one)
		list_two = [6, "row row row"]
		list_all = list_one + list_two
		print(list_all)
		# Задача 2
		# сложить два списка и определить каким магическим методом он сложился и использовать его
		list_one = [1, 'abc', 3.5, 4, 'zif']
		list_two = [6, "row row row"]
		list_all = list_one.__add__(list_two)
		print(list_all)
		
		###################################################################################################
		
		
14      Словари
		# от перемены мест ключей словарь не меняется
		my_motorbike = {
			'brand': 'Ducati',
			'price': 2500,
			'engine_vol': 1.2
		}
		other_motorbike = {
			'price': 2500,
			'engine_vol': 1.2,
			'brand': 'Ducati'
		}
		print(my_motorbike == other_motorbike) # TRUE , но id у них будер разные 
		print(my_motorbike['brand']) # как получить значение определенного ключа
		my_motorbike['price'] = 7000	# изменение значения
		# добавление элементы
		my_motorbike['is_new'] = True
		# удаление элемента
		del my_motorbike['engine_vol']
		# доступ к значений с помощью переменной
		my_motorbike = {
			'brand': 'Ducati',
			'price': 2500,
			'engine_vol': 1.2
		}

		key_name = 'brand'
		my_motorbike[key_name] = "BMW"
		print(my_motorbike) # {'brand': 'BMW', 'price': 2500, 'engine_vol': 1.2}
		# Вложенные словари и использование переменных в словаре
		engine = 1.2
		my_motorbike = {
			'brand': 'Ducati',
			'engine_vol': engine, # пример переменной в словаре
			'price_info': {
				'price': 25000,
				'is_available': True
			}
		}
		# его вызывать довольно муторно
		print(my_motorbike['price_info']['price']) # 25000
		# показить длину словаря
		print(len(my_motorbike))  # 3
		
		# GET  для получение значений ключей
		# пытаемся получить ключь из словаря, а его нет и что бы не было ошибки, используем get 
		print(my_motorbike.get('model')) # none
		print(my_motorbike.get('model', 0)) # что бы не возвращал none при отсуствие ключа, а 0
		print(my_motorbike.items()) # выводится список, который как словарь имеет ключ и значение
		print(my_motorbike.keys()) #  выводит только ключи
		print(my_disk.popitem()) # удаляет первый элемент или тот, что указываем мы
		print(list(my_motorbike.keys())) #  делает из ключей список
		new_disk = my_disk.copy() # копировать словарь
		
		# конвертация/  Лист и Кортеж можно переконвертировать в словарь, с другими типомами не получится

		my_list = [('first', 0), ['second', True]]

		my_dict = dict(my_list)

		print(my_dict) # {'first': 0, 'second': True}

		Задача
		# Создать пустой словарь, трижды попросить ввесте ключь и значение, вывести словарь, добавить элемент в словарь и удалить два элемента
		
		model_matplata = input(" Введите модель мат платы: ")
		num_matplata = input(" Введите номер мат платы: ")
		model_proccessor = input(" Введите модель процессора: ")
		num_proccessor = input(" Введите номер процессора: ")
		model_ssd = input(" Введите модель ssd: ")
		num_ssd = input(" Введите номер ssd: ")
		
		my_dict = {
			model_matplata: num_matplata,
			model_proccessor: num_proccessor,
			model_ssd: num_ssd
		}
		
		print(my_dict)
		my_dict['Korpus'] = 'metal'
		print(my_dict)
		my_dict.popitem()
		my_dict.popitem()  # я не знаю как удалить определнный элемент словаря и не хочу гуглить

		print(my_dict)

		
#######################################################################################################

15		Кортеж это как список, но его изменять нельзя
		
		posts_ids = (151, 245, 762, 167)
		print(posts_ids[0])
		posts_ids[0] = 555 # будет ошибка, так как его изменить нельзя
		
		# удалять элемент тоже нельзя
		# можно мутировать словарь внутри кортежа, но не более, новый словарь добавить нельзя
			users = (
			{
				'user_id': 134,
				'user_name': 'Alice'
			},
			{
				'user_id': 831,
				'user_name': 'Bob'
				}
			)
			print(users[1]['user_id'])
			users[1]['user_id'] = 100
			print(users[1]['user_id'])
		
		# можно использовать переменные, тогда он наверное будет менятся
		# нельзя использовать get как в списках 
		# кортежи можно обьединить с помощью (+) в новую переменную
		# методы кортежей только count и index
		# кортеж можно конвертировать в список, изменить список и конвертировать его обратно в кортеж
		# конвертация кортежа из словаря, как и в списке убирает значения, оставляет только ключи
		posts_ids = (151, 245)

		posts_ids_list = list(posts_ids)
		posts_ids_list.append(351)

		print(posts_ids_list)
		# [151, 245, 351]
		posts_ids_list = tuple(posts_ids_list)
		# (151, 245, 351)
		print(posts_ids_list)
		
		