# Логические операторы
and или or
Not чаще используется в условных инструкциях if 
если отрицаем правдивое значение, то получаем False

not 10 		# False
not 0  		# True
not 'abc'	# False
not ''		# True
not True	# False
not None	# True

# and и or являются операторами короткого замыкания
# Практика

# Оператор or 
my_list = [1, 2]
other_list = ['a', 'b']
print(not my_list)  # False
# [1, 2] первое выражение правдиво
print(my_list or other_list) # [1, 2]

# True #до операнда other_list мы не доходим
print(len(my_list) > 0 or other_list) # True

# ['a','b'] первый вариант ложен, поэтому or идет к второму операнду
print(len(my_list) < 0 or other_list) # ['a','b']

#############################################################################################

# ОПЕРАТОР AND 

my_list = [1, 2]

my_dict = {}

# {} первый вариант правдивый, поэтому выводится словарь
print(my_list and my_dict)  # {}
# false так как один из операндов ложный
print(bool(my_list and my_dict))  # False

my_dict = {'a': 5}

print(bool(my_list and my_dict))  # True, оба правдивы

############################################################################################################################################

my_list = [1, 2]
# оператор and это оператор короткого замыкания
my_list and print("List is not empty")  # List is not empty
my_list = []
my_list and print("List is not empty")  # ничего нет

############################################################################################################################################

# Задача

# сделать два одинаковых словаря и с помощью оператора логического показать что они одинаковы
one_dict = {'name': 'karla', 'family': 'Anderson'}
two_dict = {'name': 'karla', 'family': 'Anderson'}
three_dict = {'family': 'Anderson', 'name': 'karla'}
one_dict and two_dict and print("dictionaries are the same ")
# порядок мест в словаре не играет роли
one_dict and three_dict and print("dictionaries are the same ")

###########################################   27   ##############################################################

Оператор распаковки словаря

button = {
    'width': 200,
    'text': 'Buy'
}
red_button = {  # добавляем в словарь еще ключевое слово со значением
    **button,
    'color': 'red'
}

print(red_button)  # {'width': 200, 'text': 'Buy', 'color': 'red'}

print(button)  # {'width': 200, 'text': 'Buy'}

# еще пример########################################################################

button = {
    'width': 200,
    'text': 'Buy',
    'color': 'grey'
}
red_button = {  # добавляем в словарь еще ключевое слово со значением
    **button,
    'color': 'red'
	# **button, если словарь поставить в конце, то  'color': 'grey' перезапишет 'color': 'red'
} 

print(red_button)  # {'width': 200, 'text': 'Buy', 'color': 'red'}

print(button)  # {'width': 200, 'text': 'Buy', 'color': 'grey'}


# Объединение словарей ##################################################

button_info = {
    'text': 'Buy'
}

button_style = {
    'color': 'yellow',
    'with': 200,
    'height': 300
}
# главное что бы не было у словарей одинаковых ключей, иначе один другой перезапишет
button = {  
    **button_info,
    **button_style
}

# Еще вариант
# button = button_info | button_style
print(button) # {'text': 'Buy', 'color': 'yellow', 'with': 200, 'height': 300}

######################################### 27 ##################################
 # Инструкция del
 # Форматирование строк
	hello = 'hello'
	world = 'World'

	greeting = f"{hello} {world}"

	print(greeting)  # hello World

# Соединение строк
	my_name = 'Yakov'
	my_hobby = 'running'
	time = 8

	info = my_name + ' likes ' + my_hobby + ' at ' + str(time) + " o'clock" # str(time) конвертируем строку что бы не было ошибки
	info_f = f"{my_name} likes {my_hobby} at {time} o'clock " # str(time) можно не использовать
	print(info)    # Yakov likes running at 8 o'clock 
	print(info_f)  # Yakov likes running at 8 o'clock

######################### лямда функция ######################

# Лямба функции
# лямда всегда аннонимные
# Сравним традиционную и лямда функцию

def mult(a, b):
    return a * b


print(mult(10, 5))  # 50

# теперь лямда функция


# mult = lambda c, d:  c * d  если ее сконвертировать, то autopep8 сделает из 
## нее обычную функцию


print(mult(10, 5))  # 50

# Пример где следует использовать лямду функцию
# я не очень понял 117 урок, мол зачем нужна лямда или не нужна 

def greeting(greet):
    return lambda name: f"{greet}, {name}!"


morning_greeting = greeting("Good Morning")

print(morning_greeting('Yakov'))
# Good Morning, Yakov!

evening_greeting = greeting("Good Evening")

print(evening_greeting('Yakov'))
# Good Morning, Yakov!
