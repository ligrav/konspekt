# Если объединить аргументы в кортеж, то аргументов, которые может приянть функция становиться больще
def sum_nums(*args):  # звездочка объединяет элементы в кортеж
    print(args)
    print(type(args))
    print(args[0])
    return sum(args)  # складываем элементы кортежа


print(sum_nums(2, 3, 7))  # 12

# Позиционные аргументы
# Позиционные аргументы
def get_posts_info(name, posts_qty):
    info = f"{name} wrote {posts_qty} posts" 
    return info


info = get_posts_info('Yakov', 25)
print(info) # Yakov wrote 25 posts

# объединение аргументов в Dict
def get_posts_info(**person):
    print(person)
    # {'name': 'Yakov', 'posts_qty': 25}
    print(type(person))
    info = (
        f"{person['name']} wrote "
        f"{person['posts_qty']} posts"
    )
    return info


info = get_posts_info(name='Yakov', posts_qty=25)
print(info)  # Yakov wrote25 posts

## если первую программу с кортежем сделать в словаре
def get_posts_info(**person):
    info = f"{person['name']} wrote {person['posts_qty']} posts"
    return info


info = get_posts_info(posts_qty=30, name='Yakov')
print(info)  # Yakov wrote 25 posts

 # Задача  переписать вызов функции merge... что бы в нем использовались аргументы с ключевыми словаре
21 # C задачей не справился, попробую потом

22 Параменты функции
# показывает, что можно параметру присвоить значение
def mult_by_factor(value, multiplier=1):
    return value * multiplier


# 20 значение multiplier=1 не используется, так как там 2
print(mult_by_factor(10, 2))
# 5  ошибки нет, потому что  multiplier уже известен
print(mult_by_factor(5))
		
############################ более сложный пример ###############################
from datetime import date


def get_weekday():
    return date.today().strftime('%A')


# вызов функции в параметре
def create_new_posts(post, weekday=get_weekday()):
    post_copy = post.copy()
    post_copy['created_on_weekday'] = weekday
    return post_copy


initial_post = {
    'id': 243,
    'author': 'Bogdan',
}

post_with_weekday = create_new_posts(initial_post)

print(post_with_weekday)
# {'id': 243, 'author': 'Bogdan', 'created_on_weekday': 'Monday'}

# Колбек функция
	def other_fn(): # простой пример когда функция вызывается другой функцией
    #
    pass


def fn_with_callback(callback_fn):
    callback_fn()


fn_with_callback(other_fn)


# правила работы с функции
1. Называть функции исходя из выполняемых задачей
2. Название функции начинать с глагола
3. Одна функция должна выполнять одну задачу
4. Не рекомендуется изменять внешние относительно функции переменные

# Документация функции

def mult_by_factor(value, mult=1):
	# описание функции, когда пользователь укажет курсором мыши, он увидит описание
    """Multiplies number by multiplicator""" 
    return value * mult


mult_by_factor(5)

## области видимости

## пример для видимых и невидимых перемен

a = 10


def my_fn():
    a = True
    b = 15
    print(a)  # True
    print(b)  # 15


my_fn()

print(a)  # 10
print(b) # NameError: name 'b' is not defined b не определен

## Цепочка областей видимости
	
a = 5


def my_fn():
    def inner_fn():
        print(a) # 5 если a не определена в функции, то python ищет ее извне
    inner_fn()


my_fn()

# Внутри функции можно создавать глобальные переменные

def my_fn():
    global a
    a = 10


my_fn()

print(a)  # 10

# второй пример

a = 15


def my_fn():
    global a # он перезаписывает первую глобальную переменую 
    a = 10


my_fn()

print(a)  # 10

# внешние переменые не рекомендуется менять внутри функции, если это не необходимо

# 25 Операторы
# текстовые операторы
a = 10
b = a

c = a + b

print(a is b)  # True смотрит, совпадают ли у них Id
print(c is a)  # False

# другой пример
a = [1, 2]
b = [1, 2]

print(a == b)  # True метод класса, == сравнивает значения
print(a.__eq__(b)) # True  __eq__ это тоже самое что и ==
print(id(a) == id(b)) # False

###########################
 - a # унарный оператор что бы сделать числло отрицательным
 + b # делает оператор положительным
 

my_num = 10
print(+my_num)  # 10

print(not my_num)#  False показывает что число не отрицательное


my_bool = True
my_bool_2 = False
print(+my_bool)  # 1
print(+my_bool_2)  # 0

## операторы in и not in
my_car = {
    'brand':  'Toyota',
    'price': 10_000
}

print('brand' in my_car)  # True этот ключ есть в словаре
print('year' in my_car)  # False такого ключа в словаре нет
print('year' not in my_car)  # True даже не знаю как обьяснить этот простой оператор

# при вычисление операторов, лучше использовать скобки для удобства для себя

		a + ((b * c) / (d - e))
# В PYTHON есть таблица приоритетов вычисления операторов

# Задача

a = [2, 3]
b = [2, 3]
print(a == b)  # True числа в наборах равны
print(a is b)  # FALSE числа раны, а индификаторы не равны
# False переписал сравнение с оператором is по другому
print(id(a) == id(b))
# проверить есть ли опеределенные элементы используя  оператор in
print(4 in a) # False
print(2 in a) # True
print(3 in a) # True

# Ложные значения
int 0
float 0.0
complex 0j 
print(bool(0)) # false
print(bool(0.0)) # false
print(bool(0j)) # false
print(bool(None)) # false
# они были ложными
# пустые последовательности являются ложными
dict {}
list {}
tuple()
set()
range(0)
str ""
# отрицание и двойное отрицание
print(not {}) # True
print(not not {}) # False

# мне дальit не интересно смотреть 105 5 минута
