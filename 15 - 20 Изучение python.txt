16 		Наборы 
	У элементов набора нет индексов
	Список  [    ] 
	Словарь {    } 
	Кортеж  (    )
	Наборы	{    } # но в отличие от словаря тут как список идет
	
	# Особенность набора
	
	posts_ids = {151, 245, 167, 167, 151}
	print(posts_ids) # {151, 245, 167} повторяющиеся эл-ты не показывает
	# дубликаты удалены
	# наборы используются для поиска уникальных значений
	# в наборах отсуствует магический элемент get_item, поэтому мы не можем вызвать определнной элемент
	posts_ids[0] # БУДЕТ ОШИБКА
	# для набора нельзя использовать del
	del posts_ids[0] # БУДЕТ ОШИБКА
	# list нельзя добавлять в набор, так как это изменяемый объект
	my_set = {[10, 10], 5, 15, 15}
	# Кортеж можно добавить
	my_set = {(10, 10), 5, 15, 15}

	### Основные работы с наборами
	photo_s = {'1920x1080', '800x600'}

	photo_s.add('1024x768')
	other_s = {'1320:440', '1000:2000', '800x600'}

	all_s = photo_s.union(other_s)  # обединение наборов
	# common_s = photo_s.intersection(other_s) # пересечение наборов
	# аналогичная команда для пересечения набора
	common_s = photo_s & (other_s)

	print(photo_s)  # {'1920x1080', '1024x768', '800x600'}
	print(all_s)  # {'1000:2000', '1920x1080', '1024x768', '1320:440', '800x600'}
	print(common_s)  # {'800x600'}
	# Issubset
	nums = {10, 5, 35}
	other_nums = {20, 5, 12, 10, 35}

	res = nums.issubset(other_nums) # проверяем включен один набор в другой
	print(res)  # True 
	
	## еще практика 
	
	my_set = {'abc', 'd', 'f', 'y'}
	other_set = {'a', 'f', 'd'}

	# общие элементы в двух наборах
	print(my_set.intersection(other_set))  # {'f', 'd'}
	print(my_set.intersection('abcd'))  # {'d'}

	# {'d', 'a', 'abc', 'y', 'f'} обьединение двух наборов
	print(my_set.union(other_set))
	print(other_set.issubset(my_set))  # false, так как 'a' нет в my_set
	# print(my_set.difference(other_set)) # или аналогичное ему
	print(my_set - other_set)  # {'y', 'abc'}
	print(my_set & other_set)  # {'f', 'd'} два общих элемента
	print(my_set | other_set)  # сложение .union
	my_set.discard('d')  # удаление d
	# удаление d аналог, отличается от discard
	my_set.remove('f')
	# тем, если попытаться удалить элемент, которого нет, то будет ошибка
	print(my_set)  # {'abc', 'y'}
	copied_set = my_set.copy()
	my_set.add('f')
	my_set.add('t')
	copied_set.add('l')

	print(my_set)
	print(copied_set)
	print(my_set & copied_set) # смотрим общие элементы наборов
	
	####
	
	a = {'abc', 'd', 'f', 'y'}
	b = {'abc', 'd', 'f', 'l'}

	print((a | b) - (a & b))  # {'l', 'y'}
	# этот метод равносилет  symmetric_difference
	print(a.symmetric_difference(b))

	Задача 
	# Создать набор, добавить к нему элемент, заздать еще набор, 
	#найти между ними общие элементы, сконвертировать набор в список
	
	one_set = {'2', '3', '5', '11', '4', '65'}
	one_set.add('56')
	print(one_set)
	two_set = {'2', '44', '5', '131', '42', '65'}
	share_set = one_set.intersection(two_set)
	print(share_set)
	list_set = list(share_set)
	print(list_set)

17 	Диапазон 
	# Диапазон неизменяемый объект
	# Используется в циклах
	my_range = range(7)
	print(type(my_range))  # <class 'range'>
	print(my_range)  # range(0, 7)
	print(list(my_range))  # [0, 1, 2, 3, 4, 5, 6]
	print(my_range[2]) # 2 будет
	my_range = range(10, 20, 3) # начальное значение, конченое значение и шаг
	print(my_range)  # range(10, 20, 3)
	print(list(my_range)) # [10, 13, 16, 19] 4 элемента с шагом 3
	
	my_range = range(10, 20, 3)
	for n in my_range:
		print(n)
		#10
		#13
	    #16
		#19
	print(set(range(10, 20, 3))) # {16, 10, 19, 13}  пример конвертировать в набор

	# посмотреть начало, конец и шаг диапазона
	my_range = range(10, 20, 3)
	print(my_range.start)
	print(my_range.stop)
	print(my_range.step) 
	print(my_range.count) # смотрит есть ли элемент в диапазоне или нет 
	print(my_range.index(13)) # 1  индекс, 10 - 0 13 - 1 16 - 2
	
	Задание 
	Создать диапазон, конвертировать его значение в список
	my_range = range(9, 220, 3)
	list_one = []
	for n in my_range:
		list_one.append(n)
	print(list_one)

17.3	Сравнивает все типы в видео

18		Zip
	fruits = ['apple', 'banana', 'lime']

	quantities = [100, 70, 50] # можно использовать кортеж, строку, набор, набор будет не очень работать, так как он не упорядочен

	fruit_qtys_zip = zip(fruits, quantities)

	print(fruit_qtys_zip)
	# <zip object at 0x0000029A886CDF80>

	fruit_qtys_list = list(fruit_qtys_zip)

	print(fruit_qtys_list) # [('apple', 100), ('banana', 70), ('lime', 50)]
	
	## конвертация zip в словарь
	
	fruits = ['apple', 'banana', 'lime']

	quantities = [100, 70, 50]

	fruit_qtys_zip = zip(fruits, quantities)

	print(fruit_qtys_zip)
	# <zip object at 0x0000029A886CDF80>

	fruit_qtys_list = dict(fruit_qtys_zip) # больше чем две последовательности в словарь не сконвертировать

	print(fruit_qtys_list)
	#  {'apple': 100, 'banana': 70, 'lime': 50}
	
19
объект типа int создается один раз в памяти и python в случае новой переменной с этим int он ссылается на ту область пересечения
# Адреса неизменяемых объектов2
my_number = 10
print(id(my_number))
#140706195301448
other_number = 10
print(id(other_number))
#140706195301448

# Объект a = 10 a = b a,b имеют одинаковый индетификатор, но если b = b + 2, b теперь имеет другой id 
# со списком так не получится [1, 2, 3] в каждой переменной будет новый id

Как копировать словарь

	from copy import deepcopy # встроенных функций для копирования словаря нет, только библиотека
	info = {
		'name': 'Bogdan',
		'is_instructor': True,
		'reviews': []
	}

	info_deepcopy = deepcopy(info) # info.copy делает лишь ссылку на один id 

	info_deepcopy['reviews'].append('Great course!')

	print(info)
	# {'name': 'Bogdan', 'is_instructor': True, 'reviews': []}
	print(info_deepcopy)
	# {'name': 'Bogdan', 'is_instructor': True, 'reviews': ['Great course!']} 
