		Python 
 45 Началась лекция об обьектах и классах
 типы
	str - строка 'yakov'
	int - целое число (10)
	bool true логические типы
	list [1, 2, 3] - список
	dict {'min': 5, 'max': 8} - словарь 
51 Практика
56	Встроеные функции
		print("Hello") - пример встроеной функции
	
	def my_fn(a, b) # пример функции
		a = a + 1
		с = a + b
		return c 
	###	
	name = input ("Enter name") # пример инпута, она всегда будет строкой
	print(name)
	
1:03	
	Встроеная функция Dir 
		print(dir(name)) # отобразить все атрибуты для name ???
		
		name = "Yakov"
		print(name.upper()) # пример вывода метода, я делаю свое имя в заглавные буквы и значение переменой name не меняется
		print(dir()) # показывает встроеные функции
		print(dir(__builtins__)) # вывели списко встороенных в python функции __builtins__ - это обьект

1:16	
		name = input("Enter your name: ")
		print(name)
		print(name.capitalize()) # этот метод  делает первую букву заглавной
		print(name.upper()) # этот метод  делает все  буквы заглавной
		
		print(dir(name)) # выводит все методы для name 

1:26	Рассказывает об отступах
	# пример	
	def my_name(name): 
		print(name) # print в теле функции

	my_name('Bogdan') # ушел из тела функции
	
1:34	PEP8 - стилевой гайд для кода python	
https://peps.python.org/pep-0008/ документ, который описывает как правильно ставить отступы
		123456789012345678901234567890123456789012345678901234567890123456789012345678980 - максимальная длина строки в питоне
 
6.2 Инструкции
		Инструкция выполняет действие
		a = 'yakov' # Инструкция Присвоения значения
		import datetime # Импортирования модуля
		If # условная инструкция

7.1	Переменые
		snake_casw - переменные, функции, методы, модули
		PascalCase - классы
		my-package - пакеты
		DB_Password - Константы
		
8.1	Отличие статической типизации от динамической
		string a = 'abc' # статическая, в python это не сработает
			   a = 'abc' # Динамическая
		В Питон   только динамическая типизация
		
8.2 Изменяемые и неизменяемые обьекты 
	string, boolean, int, float, tuple, None - неизменяемый обьекты
	list, dictionary( словарь), set (набор), user-defined classes ( пользоват. класыы) - изменяемые обьекты
8.3	Переменные и объекты
8.4 Индификаторы 
		my = 'yakov'
		print(id(my)) # 1716903509424 ячейка в памяти, которую она занимает
		my = 100022
		print(id(my)) # 1716900634160
	Пример того, как работать с обьектом, и то что они как ссылки, я даже не знаю, где мне это понадобится

8.5		практика id 
		my_name = 'Yakov'
		print(id(my_name))  # id меняется

		my_num = 100
		print(id(my_num))  # id не меняется

		other_num = my_num
		print(id(other_num))  # id не меняется и такой же как в первом, так как они ссылаются на одинаковый обьект памяти

9.1	Строки
		my_name = 'Yakov'
		print(type(my_name)) # выводит типо строки
		#<class 'str'>
		
		long_str = """  you listing 
		to me or no, what do you thhing
		about for me, eat me""" # строка длинная с переходом
		print(long_str)

		print(type(long_str))
		print(id(long_str))
		
9.2	Встроеные методов и строк Теория 
9.3 Практика 
	my_comment = "This is my short comment"
	print(len(my_comment))  # считаем строку

	print(my_comment.replace('short', 'long')) # меняем слова в строке
	print(my_comment)  # но сама строка как переменная не меняется
	
	print(my_comment.count(' '))  # всчитаем пробелы
	print(my_comment.count('s'))  # всчитаем букву s
	print(my_comment[0])  # первый символ строки
	print(my_comment[-1])  # последний символ строки
	print(my_comment[-5])  # пятый с конца символ строки

10.1 int 	
	user_input = input("Enter any number: ")
	##### конвертируем строку в число
	any_num = int(user_input)
	print(any_num)
	##### или лучше вариант ###
	user_input = int(input("Enter any number: ")) # конвертируем сразу в число
	##### возведение в степень
	base = 5
	power = 3
	
	print(pow(base, power)) # 5^3 это 125
	
	##### нижнее подчеркивание для длинных чисел 
	one_million = 1_000_000
	print(one_million)	# 1000000
	
10.3 float
		Дал самостроятельную, посмотреть какие обьекты есть у float, я сразу вспомнил команду dir
		base = '5.666666'
		print(type(base))
		float_onу = float(base)
		print(float_onу)
		print(round(float_onу))  # округляет число
		print(type(round(float_onу)))  # показывает тип округления

10.4 Комплексные числа
		Пример комплексных чисел
		complex_a = 3 + 5j
		complex_b = 4 + 7j

		sum = complex_a + complex_b
		print(sum)  		 # (7+12j)
		print(type(sum)) 	 # <class 'complex'>
		# умножение комплексных чисел вещь странная
		Все, я отдыхать