# Обработка ошибок

try:
	# Выполнение блока кода
	pass
except ErrorType:
	# Этот блок выполняется в случае возникновения ошибок в блоке try 
	pass
	
	###########################################################################3

try:
	print(10/0)
pass
except ZeroDivisionError: # ошибка деления на ноль
	print("Error ZeroDivisionError!")
print('Continiue.....')

################################################################################

# Получить информацию об ошибки

try:
    print(10/0)
# ZeroDivisionError: division by zero
    pass
except ZeroDivisionError as e:  # ошибка деления на ноль
    print(type(e)) # <class 'ZeroDivisionError'>
    print(e) # division by zero
print('Continiue.....')

######################################### Другие типы ошибок ##############################
try:
    print('10' / 0)
except ZeroDivisionError as e:  # отлавливаем ошибку деления на 0
    print(e)
except TypeError as e:  # отлавливаем ошибку типа объекта
    print(e)
     # unsupported operand type(s) for /: 'str' and 'int'

print('continue')

############################## else и finaly  ###################################

try:
    print(12 / 4)
except ZeroDivisionError as e:  # отлавливаем ошибку деления на 0
    print(e)
except TypeError as e:  # отлавливаем ошибку типа объекта
    print(e)
    # unsupported operand type(s) for /: 'str' and 'int'
else: 
    print("There was no error")
finally: # finally выполняется в любом случае, возникла ошибка или нет
    print('continue')

################################# отлавливать любой тип ошибки ###############

try:
    print(10 / 0)
except Exception as e: # есть возможность сохранить ошибку и посмотреть какая она
    print(e)  # division by zero 
    # можно отлавливать любой тип ошибки
	
	#### Вариант, который не рекомендуется использовать
try:
    print(10 / 0)
except: # не имеем доступа к ошибки, просто есть ошибка и все
    print("Some error occurred")
# Some error occurred 

############################################# создания своего отлова ошибка ##################
# генерация своих ошибок с помощью метода raise
def divide_nums(a, b):
    if b == 0:
        raise TypeError("Second argument can't be 0") # добавили в typeError проверку на 0
    return a / b


try:
    divide_nums(10, 0)
except ZeroDivisionError as e: # лишняя проверка на ошибку, так как эту ошибку обработали
    print(e)
except TypeError as e:
    print(e)  # Second argument can't be 0

print('Continue')

#############################
Задача
# неправильный вариант 
def main_list(**image_info):
    try:
        info_dim = (

            f"image {image_info['image_title']} has id {image_info['image_id']}"
        )
    except TypeError as e:
        print(e)
    return info_dim


info = main_list(image_id='5156', image_title='my_cat')
print(info)

######## Правильный вариант, я смог его решить только с чат gpd  ###############

def main_list(**image_info):
    try:
        info_dim = (
            f"image {image_info['image_title']} has id {image_info['image_id']}"
        )
    except KeyError as e:
        print(f"KeyError: {e}")
        return None
    except TypeError as e:
        print(f"TypeError: {e}")
        return None
    return info_dim

info = main_list(image_id='5156', image_title='my_cat')

print(info)

################################################################################################

# 32 Распаковка списков в python ## Аналогично это с кортежем 

my_fruits = ['apple', 'banana', 'lime']

my_apple, my_banana, my_lime = my_fruits # если добавить еще переменную, то будет ошибка

print(my_apple)  # apple
print(my_banana)  # banana
print(my_lime)  # lime

## Я переписал этот код с проверкой на ошибку ключа

try:
    my_fruits = ['banana', 'lime']
    my_apple, my_banana, my_lime = my_fruits
    print(my_apple)  # apple
    print(my_banana)  # banana
    print(my_lime)  # lime
except ValueError as e:
    print(e)
	
############## Использование * При распаковке




my_fruits = ['apple', 'banana', 'lime']
my_apple, *remaining_fruits = my_fruits

print(my_apple)  # apple
print(remaining_fruits)  # ['banana', 'lime'] class list

############# Распаковка словаря в именованые аргументы
# пример, но чет пока не доходит
user_profile = {
    'name': 'Bogdan',
    'comments_qty': 23,
}


def user_info(name, comments_qty=0):
    if not comments_qty:
        return f"{name} has no comments"

    return f"{name} has {comments_qty} comments"


print(user_info(**user_profile))
## Распаковка списка в позиционные аргументы
user_data = ['Yakov', 23]


def user_info(name, comments_qty):
    if not comments_qty:
        return f"{name} has no comments"
    return f"{name} has {comments_qty} comments"


print(user_info(*user_data))
# Yakov has 23 comments
# Еще вариант
my_name, my_comments_qty = user_data
print(user_info(my_name, my_comments_qty))
# Yakov has 23 comments


## 33 if ######################################################################
	
	## Самый первый if 
my_number = 25
if my_number > 0:
    print(my_number, "is positive number")
	
	###########################################
person_info = {
    'age': 20
}

if not person_info.get('name'):
    print("not name")


#######################################
num_one = 10
num_two = 5.3

if (num_one > 0 and
    num_two > 0 and
    isinstance(num_one, int) and
        isinstance(num_two, int)):
    print("Both number are ints and positive") # не увидим ничего
	
# if eLse
my_number = 21.5

if type(my_number) is int:
    print(my_number, "is integer")
else:
    print(my_number, "is not an integer")
######## доп ####
my_phone = {
    'price': 200
}

if my_phone.get('brand'):
    print("Phone's brand is", my_phone['brand'])
else:
    print("There is no phone brand")

#########################################################

# if elif

my_number = -10

if my_number > 0:
    print(my_number, "is positive number")
elif my_number < 0:
    print(my_number, "is negative number") 
else: 
    print(my_number, "is zero")
	
# if в функциях
# в функции лучше использовать return чем else 
def nums_info(a, b):
    if (type(a) is not int) or (type(b) is not int):
        return "one argument not int"
    if a >= b:
        return f"{a} more or equals {b}"
    return f"{a} less {b}"


print(nums_info(True, 10)) # один из аргументов  не целое число
print(nums_info(10, 2))  # 10 больше или равно 2
print(nums_info(4, 15))  # 4 меньше 15

## Задание

# Создать функцию route_info которая включает в себя словарь
# если в словаре есть ключ distance выводим одно сообщение
# если в словаре есть ключ speed, time то  выводим другое сообщение
# если ключейц нет, то выводим  No distance info is available
# проверить со всеми ключами
# добавить проверку speed and time на целое число
# последнее задание не получилось, где то ошибся
# последняя получилась проверка на int прошла
def route_info(**my_dict):
    if my_dict.get('distance'):
        str_if = "Distance to your destination is <distance>"
    elif (my_dict.get('speed') and
          my_dict.get('time')
          and my_dict.get('speed', int)
          and my_dict.get('time', int)):
        str_if = "Distance to your destination is <speed*time>"
    else:
        str_if = "No distance info is available"
    return str_if


info = route_info(distance='100m')
info_speed_time = route_info(speed = 11, time = 60)
info_pusto = route_info()
print(info)
print(info_speed_time)
print(info_pusto)

# оператор с тремя операндами
# Тернарные операторы
my_number = 21.5
# все можно  написать в одной строке
print("is int") if type(my_number) is int else print("is not int")
# аналогичный вариант в две строки
if type(my_number) is int:
    print("is int")
else:
    print("is not int")

# другой пример

# send_img(img) if img.get['is_processed'] else process_and_send_img(img)

product_qty = 10

print("in stock" if product_qty > 0 else "out of stock")
################################################

temp = +24

weather = 'hot' if temp > 18 else "cold"
print(weather) # hot

# Практика Тернарных операторов

my_img = ('1920', '1080')

print(f"{my_img[0]}x{my_img[1]}") if len(my_img) == 2 else print("Incorrect image format")
## тот же код
my_img = ('1920', '1080')

info  = f"{my_img[0]}x{my_img[1]}" if len(
    my_img) == 2 else "Incorrect image format"

print(info)

#  импользуя if else переписать пример с тем же результатом
# c помощью тенарного оператора проверить длину строки, если 
# строка более 20 символов, то пишем string long
my_img = ('1920', '1080')

info  = f"{my_img[0]}x{my_img[1]}" if len(
    my_img) == 2 else "Incorrect image format"

print(info)

# изи 

my_img = ('1920', '1080')
if len(my_img) == 2:
    info = f"{my_img[0]}x{my_img[1]}"
    print(info)
else:
    print("Incorrect image format")

# задание с длинной строки
my_str = " Приветсвую вам, я мангалус, и теперь твой город покушал лучшего зерна"
info = print(my_str) if len(my_str) < 20 else print("string long")

################################## Циклы #################################################

# Циклы 
# первый пример for in для списка

my_list = [True, 10, 'abc', {}]

for elem in my_list:
    print(elem)

# for in для кортежей
# все тоже самое
video_info = ('1920x1080', True, 27)

for elem in video_info:
    print(elem)
    
# for in для словарей

my_object = {
    'x': 10,
    'y': True,
    'z': 'abc'
}
for key in my_object:
    print(key, my_object[key])
	
 #################################№№№ for in для словарей и метод items()####################

my_object = {
    'x': 10,
    'y': True
}

for item in my_object.items(): # в цикле получаем доступ к ключу и к значению
    key, value = item # распаковка кортежа
    print(key, value)
# x 10
# y True

# ######################### Пример на практике #################################

my_dict = {'id': 324, 'title': 'test'}

for item in my_dict.items():
   # print(item) # ('id', 324) ('title', 'test') два кортежа
    key, value = item
    print(key, value) # id 324 title test распаковка словаря

# еще пример этого цикла
# k, v - key, value
for k, v in my_dict.items():
    print(k, v) # id 324 title test
	
	
#################### for in для наборов ###########################

video_ids = {1435, 4317, 2761, 5721}

for id in video_ids:
    print(id)
# 5721
# 1435
# 2761
# 4317

#  можно использовать для строк 
my_name = 'Yakov'

for char in my_name:
    print(char)
# Y
# a
# k
# o
# v
# для диапазонов
for num in range(5):
    print(num)
    print(num + 1)
# 0 # 1
# 1 # 2
# 2 # 3
# 3 # 4
# 4 # 5
# диапазоны с шагом

for odd_num in range(3,10, 2):
    print(odd_num)
# 3
# 5
# 7
# 9

##################### Задача ############################
# Задача 1
# # Создайте функцию dict_to_list
# # которая будет конвертировать словарь в список кортежей
# # вернуть список значения типа list 

# # Функция должна принимать словарь, а возвращать список кортежей, в 
# # каждом кортеже должны быть пары (key, value) из словаря

# # Если значение ключа - целое число, то его нужно умножать на 2

# # перед добавлением в кортеж
def dict_to_list(**my_dict):
    for item in my_dict.items():
        my_list = list(item)
        print(my_list)

info = dict_to_list(name = 'yakov', name2 = 'stas')

# 2 
def dict_to_list(**my_dict):
    for item in my_dict.items():
        key, value = item # я разделил словарь на два элемента
        if type(value) is int: # если значение словаря целове число, умножаю на два
            value = value * 2
        item = (key, value) # перевожу переменные в кортеж
        print(item)

info = dict_to_list(name = 'yakov', name2 = 'stas', price = 233, price2 = 218)


###########################  Задача 2 ###################
# Создайте функцию filter_list, которая будет фильтровать список
# У функции должно быть два параметра - список и тип значения
# Функциядолжна вернуть новый список, в котором останутся только значения
# того типа, который был передан в вызове функции вторым аргументом
# Функцию можно вызвать например так
# filter_list([35, True, 'abc', 10], int) и получить [35, 10]

# вторую задачу сделал, но не понял почему у меня true считается за целове число
# может это особенность True 
def filter_list(my_list, type_element):
    for i in my_list:
        if type_element is int and isinstance(i, int):
           print(i)
        if type_element is str and isinstance(i, str):
          print(i)

info = filter_list([35, 'True', True, 'abc', 10], int)


# решение задачи 2 без цикла, а с помощью функции filter
# в его решение True тоже число 
def filter_list(list_to_filter, value_type):
  def check_element_type(elem):
    return isinstance(elem, value_type)
  
  return list(filter(check_element_type, list_to_filter))

res = filter_list([1,10, 'abc', 5.5, True], int)
print(res)

## использование лямда функции - пример на задаче

def filter_list(list_to_filter, value_type):
  return list(filter(lambda elem:type(elem) is value_type, list_to_filter))

res = filter_list([1,10, 'abc', 5.5, True], int)
print(res)
